grammar MyLang;

options {
    language=C;
    output=AST;
    ASTLabelType = pANTLR3_BASE_TREE;
}

tokens {
    EXPR;
    TERM;
    BINARY_OP;
    UNARY_OP;
    BRACES;
    PLACE;
    LITERAL;
    PLUS;
    MINUS;
    MUL;
    ASSIGN;
    NEG;
    NOT;
    BOOL;
    STR;
    SYMB;
    HEX;
    BITS;
    DEC;
    IDENTIFIER;
    BUILTIN_TYPE;
    CUSTOM_TYPE;
    ARRAY;
    SOURCE_ITEM;
    VAR;
    SOURCE;
    TYPE;
    LIST;
    INIT;
    ARRAY_SIZE;
    CALL;
    INDEXER;
    PRIMARY;
    TYPEREF;
    BLOCK;
    FUNC_SIGNATURE;
    FUNC_DEF;
    ARGDEF_LIST;
    ARGDEF;
    NAME;
    BREAK;
    FUNC_CALL;
    EXPR_LIST;
    INDEXING;
    WHILE;
    DO_WHILE;
    IF;
    ELSE;
    VARARGS;
    CLASS;
    INTERFACE;
    CLASS_BODY;
    INTERFACE_BODY;
    CLASS_DECL;
    INTERFACE_DECL;
    FIELD;
    METHOD;
    ACCESS_MODIFIER;
    EXTENDS;
    IMPLEMENTS;
    MM_ACCESS;
    NEW;
    COMPILER;
    STATIC;
}

@header {
    #define _empty NULL
}

source
    :
    sourceItem* EOF -> ^(SOURCE sourceItem*)
    ;

sourceItem
    : classDecl
    | interfaceDecl
    ;

classDecl
    : 'class' identifier classExtends? classImplements? classBody
      -> ^(CLASS_DECL ^(NAME identifier) classExtends? classImplements? classBody)
    ;

classExtends
    : 'extends' identifier -> ^(EXTENDS identifier)
    ;

classImplements
    : 'implements' identifier (',' identifier)*
      -> ^(IMPLEMENTS identifier+)
    ;

classBody
    : '{' classMember* '}' -> ^(CLASS_BODY classMember*)
    ;

classMember
    : accessModifier? var ';' -> ^(FIELD accessModifier? var)
    | accessModifier funcSignature (statementBlock | ';') -> ^(METHOD accessModifier funcSignature statementBlock?)
    ;

interfaceDecl
    : 'interface' identifier interfaceBody
      -> ^(INTERFACE_DECL ^(NAME identifier) interfaceBody)
    ;

interfaceBody
    : '{' interfaceMember* '}' -> ^(INTERFACE_BODY interfaceMember*)
    ;

interfaceMember
    : funcSignature ';' -> ^(METHOD funcSignature)
    ;

accessModifier
    : 'public' additionalModifier* -> ^(ACCESS_MODIFIER 'public' (additionalModifier)*)
    | 'private' additionalModifier* -> ^(ACCESS_MODIFIER 'private' (additionalModifier)*)
    ;

additionalModifier
    : 'static' -> STATIC
    | 'compiler' -> COMPILER
    ;

funcSignature
    : typeRef? identifier '(' argDefList ')' -> ^(FUNC_SIGNATURE typeRef? ^(NAME identifier) argDefList)
    ;

argDefList
    : (argDef (',' argDef)*)? (VARARGS_TOKEN)? -> ^(ARGDEF_LIST (argDef)* ^(VARARGS VARARGS_TOKEN)?)
    ;

argDef
    : typeRef? identifier -> ^(ARGDEF typeRef? ^(IDENTIFIER identifier))
    ;

statement
    : (var ';') => var ';' -> var
    | statementBlock -> statementBlock
    | ifStatement -> ifStatement
    | whileStatement -> whileStatement
    | doWhileStatement -> doWhileStatement
    | 'break' ';' -> ^(BREAK 'break')
    | exprStatement -> exprStatement
    ;

typeRef
    : multipleTypeRef
    | singleTypeRef
    ;


multipleTypeRef
    : firstTypeRef simpleTypeRef* -> ^(firstTypeRef simpleTypeRef*)
    ;

firstTypeRef
    : simpleTypeRefWithArray
    ;

simpleTypeRef
    : simpleTypeRefWithOptionalArray
    ;

simpleTypeRefWithArray
    : baseType array+ -> ^(TYPEREF baseType array+)
    ;

simpleTypeRefWithOptionalArray
    : baseType array* -> ^(TYPEREF baseType array*)
    ;

singleTypeRef
    : baseType array* -> ^(TYPEREF baseType array*)
    ;

array
    : '[' size+=(',')* ']' -> ^(ARRAY ^(ARRAY_SIZE $size*)?)
    ;

var
    : typeRef varDecl (',' varDecl)* -> ^(VAR typeRef varDecl+)
    ;

varDecl
    : identifier ('=' expr)? -> ^(IDENTIFIER identifier) ^(INIT identifier expr?)
    ;

baseType
    : builtinType -> ^(BUILTIN_TYPE builtinType)
    | customType
    ;

builtinType
    : boolType
    | byteType
    | intType
    | uintType
    | longType
    | ulongType
    | charType
    | stringType
    | refType
    ;

customType
    : identifier -> ^(CUSTOM_TYPE identifier)
    ;

ifStatement
    : 'if' '(' expr ')' statement ('else' statement)? -> ^(IF ^(EXPR expr) statement ^(ELSE statement)?)
    ;

statementBlock
    : '{' statement* '}' -> ^(BLOCK statement*)
    ;

whileStatement
    : 'while' '(' expr ')' statement -> ^(WHILE ^(EXPR expr) statement)
    ;

doWhileStatement
    : 'do' statementBlock 'while' '(' expr ')' ';' -> ^(DO_WHILE statementBlock ^(EXPR expr))
    ;

exprStatement
    : expr ';' -> ^(EXPR expr)
    ;

expr
    : assignmentExpr
    ;

assignmentExpr
    : logicalOrExpr (assign^ logicalOrExpr)?
    ;

logicalOrExpr
    : logicalAndExpr (or^ logicalAndExpr)*
    ;

logicalAndExpr
    : comparisonExpr (and^ comparisonExpr)*
    ;

comparisonExpr
    : addExpr ((eq^ | neq^ | le^ | gr^ | leEq^ | grEq^) addExpr)*
    ;

addExpr
    : mulExpr ((plus^ | minus^) mulExpr)*
    ;

mulExpr
    : unaryExpr ((mul^ | divide^ | mod^) unaryExpr)*
    ;

unaryExpr
    : unOp^ unaryExpr
    | primary
    ;

primary
    : atom (postfix^)*
    ;

atom
    : NEW_TOKEN identifier '(' exprList? ')' -> ^(NEW exprList? ^(IDENTIFIER identifier)) 
    | braces
    | place
    | literal
    ;

postfix
    : funcCallSuffix
    | indexingSuffix
    | memberAccess
    ;

memberAccess
    : DOT_TOKEN identifier -> ^(MM_ACCESS ^(IDENTIFIER identifier))
    ;

funcCallSuffix
    : '(' exprList? ')' -> ^(FUNC_CALL exprList?)
    ;

indexingSuffix
    : '[' exprList? ']' -> ^(INDEXING exprList?)
    ;

exprList
    : expr (',' expr)* -> ^(EXPR_LIST expr+)
    ;

braces
    : '(' expr ')' -> expr
    ;

place
    : identifier -> ^(IDENTIFIER identifier)
    ;

literal 
    : boolLit -> ^(BOOL boolLit)
    | str -> ^(STR str)
    | symb -> ^(SYMB symb)
    | hex -> ^(HEX hex)
    | bits -> ^(BITS bits)
    | dec -> ^(DEC dec)
    ;

unOp
    : minus -> NEG
    | exclMark -> NOT
    ;

identifier: IDENTIFIER_TOKEN;

str: STR_TOKEN;
symb: CHAR_TOKEN;
hex: HEX_TOKEN;
bits: BITS_TOKEN;
dec: DEC_TOKEN;
boolLit: BOOL_TOKEN;
minus: MINUS_TOKEN;
exclMark: EXCL_MARK_TOKEN;
plus: PLUS_TOKEN;
mul: MUL_TOKEN;
assign: ASSIGN_TOKEN;
divide: DIV_TOKEN;
mod: MOD_TOKEN;
eq: EQ_TOKEN;
neq: NEQ_TOKEN;
le: LE_TOKEN;
gr: GR_TOKEN;
leEq: LE_EQ_TOKEN;
grEq: GR_EQ_TOKEN;
or: OR_TOKEN;
and: AND_TOKEN;

boolType: BOOL_TYPE;
byteType: BYTE_TYPE;
intType: INT_TYPE;
uintType: UINT_TYPE;
longType: LONG_TYPE;
ulongType: ULONG_TYPE;
charType: CHAR_TYPE;
stringType: STRING_TYPE;
refType: REF_TYPE;

MINUS_TOKEN: '-';
EXCL_MARK_TOKEN: '!';
PLUS_TOKEN: '+';
MUL_TOKEN: '*';
ASSIGN_TOKEN: '=';
DIV_TOKEN: '/';
MOD_TOKEN: '%';
EQ_TOKEN: '==';
NEQ_TOKEN: '!=';
LE_TOKEN: '<';
GR_TOKEN: '>';
LE_EQ_TOKEN: '<=';
GR_EQ_TOKEN: '>=';
OR_TOKEN: '||';
AND_TOKEN: '&&';

BOOL_TYPE: 'bool';
BYTE_TYPE: 'byte';
INT_TYPE: 'int';
UINT_TYPE: 'uint';
LONG_TYPE: 'long';
ULONG_TYPE: 'ulong';
CHAR_TYPE: 'char';
STRING_TYPE: 'string';
REF_TYPE: 'ref';

DOT_TOKEN: '.';
NEW_TOKEN: 'new';
BOOL_TOKEN: ('true' | 'false') ;
IDENTIFIER_TOKEN: (('a'..'z' | 'A'..'Z') | ('_')) (('a'..'z' | 'A'..'Z') | ('_') | ('0'..'9'))* ;
BITS_TOKEN: '0' ('b'|'B') ('0' | '1')+ ;
HEX_TOKEN: '0'('x'|'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+ ;
DEC_TOKEN: ('-')?('0'..'9')+ ;
CHAR_TOKEN: '\'' (ESC_SEQ | ~('\'' | '\\')) '\'' ;
STR_TOKEN: ('"') ('\\' . | ~('\\'|'"'))* ('"');
VARARGS_TOKEN: '...';


LINE_COMMENT
    :   '//' ~('\n'|'\r')* { SKIP(); };

fragment ESC_SEQ
    :   '\\' ('n' | 't' | 'r' | '0' | '\\' | '\'' | '\"')
    ;

NEWLINE:'\r'? '\n' { SKIP(); };
WSS: (' '|'\t')+ { SKIP(); };